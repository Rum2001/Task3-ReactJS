{"ast":null,"code":"import { socket } from \"../api/socket\";\nexport class OnlineServer {\n  constructor() {\n    this.player = void 0;\n  }\n\n  getServers() {\n    return new Promise((res, rej) => {\n      socket.emit(\"get-servers\", null, (err, servers) => {\n        if (err) return rej(err);\n        console.log(servers);\n        res(servers);\n      });\n    });\n  }\n\n  getServerPlayers() {\n    return new Promise((res, rej) => {\n      socket.emit(\"get-server-players\", null, (err, players) => {\n        if (err) return rej(err);\n        res(players);\n      });\n    });\n  }\n\n  createServer(serverName, serverPassword) {\n    return new Promise((res, rej) => {\n      socket.emit(\"create-server\", {\n        serverName,\n        serverPassword,\n        player: this.getPlayer()\n      }, (err, playerId) => {\n        if (err) return rej(err);\n        res(playerId);\n      });\n    });\n  }\n\n  joinServer(serverId, serverPassword) {\n    return new Promise((res, rej) => {\n      socket.emit(\"join-server\", {\n        serverId,\n        serverPassword,\n        player: this.getPlayer()\n      }, (err, playerId) => {\n        if (err) {\n          return rej(err);\n        }\n\n        setTimeout(() => {// socket.emit(\"add-bots\");\n        }, 2000);\n        res(playerId);\n      });\n    });\n  }\n\n  emitReady() {\n    socket.emit(\"start-game\");\n  }\n\n  leaveServer() {\n    socket.emit(\"leave-server\");\n    this.removeAllListeners();\n  }\n\n  move(draw, cardId) {\n    return new Promise((res, rej) => {\n      socket.emit(\"move\", {\n        cardId,\n        draw\n      }, err => {\n        if (err) return rej(err);\n        res();\n      });\n    });\n  }\n\n  onPlayersUpdated(cb) {\n    socket.on(\"players-changed\", cb);\n    return () => socket.off(\"players-changed\", cb);\n  }\n\n  onGameInit(cb) {\n    socket.on(\"init-game\", cb);\n    return () => socket.off(\"init-game\", cb);\n  }\n\n  onMove(cb) {\n    socket.on(\"move\", cb);\n    return () => socket.off(\"move\", cb);\n  }\n\n  onPlayerLeft(cb) {\n    socket.on(\"player-left\", cb);\n    return () => socket.off(\"player-left\", cb);\n  }\n\n  onFinishGame(cb) {\n    socket.on(\"finished-game\", cb);\n    return () => socket.off(\"finished-game\", cb);\n  }\n\n  removeAllListeners() {\n    socket.removeAllListeners();\n  }\n\n  getPlayer() {\n    if (this.player) return this.player;\n    this.player = {};\n    this.player.name = localStorage.getItem(\"playerName\");\n    this.player.img = localStorage.getItem(\"playerImg\");\n    return this.player;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/NCC/Desktop/WorkSpace/Task3-ReactJS/src/Server/OnlineServer.ts"],"names":["socket","OnlineServer","player","getServers","Promise","res","rej","emit","err","servers","console","log","getServerPlayers","players","createServer","serverName","serverPassword","getPlayer","playerId","joinServer","serverId","setTimeout","emitReady","leaveServer","removeAllListeners","move","draw","cardId","onPlayersUpdated","cb","on","off","onGameInit","onMove","onPlayerLeft","onFinishGame","name","localStorage","getItem","img"],"mappings":"AAEA,SAASA,MAAT,QAAuB,eAAvB;AAEA,OAAO,MAAMC,YAAN,CAA8C;AAAA;AAAA,SACnDC,MADmD;AAAA;;AAGnDC,EAAAA,UAAU,GAA0B;AAClC,WAAO,IAAIC,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/BN,MAAAA,MAAM,CAACO,IAAP,CAAY,aAAZ,EAA2B,IAA3B,EAAiC,CAACC,GAAD,EAAWC,OAAX,KAAqC;AACpE,YAAID,GAAJ,EAAS,OAAOF,GAAG,CAACE,GAAD,CAAV;AACTE,QAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AAEAJ,QAAAA,GAAG,CAACI,OAAD,CAAH;AACD,OALD;AAMD,KAPM,CAAP;AAQD;;AACDG,EAAAA,gBAAgB,GAAsB;AACpC,WAAO,IAAIR,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/BN,MAAAA,MAAM,CAACO,IAAP,CAAY,oBAAZ,EAAkC,IAAlC,EAAwC,CAACC,GAAD,EAAWK,OAAX,KAAiC;AACvE,YAAIL,GAAJ,EAAS,OAAOF,GAAG,CAACE,GAAD,CAAV;AACTH,QAAAA,GAAG,CAACQ,OAAD,CAAH;AACD,OAHD;AAID,KALM,CAAP;AAMD;;AACDC,EAAAA,YAAY,CAACC,UAAD,EAAqBC,cAArB,EAA+D;AACzE,WAAO,IAAIZ,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/BN,MAAAA,MAAM,CAACO,IAAP,CACE,eADF,EAEE;AAAEQ,QAAAA,UAAF;AAAcC,QAAAA,cAAd;AAA8Bd,QAAAA,MAAM,EAAE,KAAKe,SAAL;AAAtC,OAFF,EAGE,CAACT,GAAD,EAAWU,QAAX,KAAgC;AAC9B,YAAIV,GAAJ,EAAS,OAAOF,GAAG,CAACE,GAAD,CAAV;AACTH,QAAAA,GAAG,CAACa,QAAD,CAAH;AACD,OANH;AAQD,KATM,CAAP;AAUD;;AAEDC,EAAAA,UAAU,CAACC,QAAD,EAAmBJ,cAAnB,EAA6D;AACrE,WAAO,IAAIZ,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/BN,MAAAA,MAAM,CAACO,IAAP,CACE,aADF,EAEE;AAAEa,QAAAA,QAAF;AAAYJ,QAAAA,cAAZ;AAA4Bd,QAAAA,MAAM,EAAE,KAAKe,SAAL;AAApC,OAFF,EAGE,CAACT,GAAD,EAAWU,QAAX,KAAgC;AAC9B,YAAIV,GAAJ,EAAS;AACP,iBAAOF,GAAG,CAACE,GAAD,CAAV;AACD;;AACDa,QAAAA,UAAU,CAAC,MAAM,CACf;AACD,SAFS,EAEP,IAFO,CAAV;AAGAhB,QAAAA,GAAG,CAACa,QAAD,CAAH;AACD,OAXH;AAaD,KAdM,CAAP;AAeD;;AACDI,EAAAA,SAAS,GAAS;AAChBtB,IAAAA,MAAM,CAACO,IAAP,CAAY,YAAZ;AACD;;AACDgB,EAAAA,WAAW,GAAS;AAClBvB,IAAAA,MAAM,CAACO,IAAP,CAAY,cAAZ;AACA,SAAKiB,kBAAL;AACD;;AACDC,EAAAA,IAAI,CAACC,IAAD,EAAuBC,MAAvB,EAAsD;AACxD,WAAO,IAAIvB,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/BN,MAAAA,MAAM,CAACO,IAAP,CAAY,MAAZ,EAAoB;AAAEoB,QAAAA,MAAF;AAAUD,QAAAA;AAAV,OAApB,EAAuClB,GAAD,IAAc;AAClD,YAAIA,GAAJ,EAAS,OAAOF,GAAG,CAACE,GAAD,CAAV;AACTH,QAAAA,GAAG;AACJ,OAHD;AAID,KALM,CAAP;AAMD;;AACDuB,EAAAA,gBAAgB,CAACC,EAAD,EAA8C;AAC5D7B,IAAAA,MAAM,CAAC8B,EAAP,CAAU,iBAAV,EAA6BD,EAA7B;AACA,WAAO,MAAM7B,MAAM,CAAC+B,GAAP,CAAW,iBAAX,EAA8BF,EAA9B,CAAb;AACD;;AAEDG,EAAAA,UAAU,CACRH,EADQ,EAEI;AACZ7B,IAAAA,MAAM,CAAC8B,EAAP,CAAU,WAAV,EAAuBD,EAAvB;AACA,WAAO,MAAM7B,MAAM,CAAC+B,GAAP,CAAW,WAAX,EAAwBF,EAAxB,CAAb;AACD;;AACDI,EAAAA,MAAM,CACJJ,EADI,EAOQ;AACZ7B,IAAAA,MAAM,CAAC8B,EAAP,CAAU,MAAV,EAAkBD,EAAlB;AACA,WAAO,MAAM7B,MAAM,CAAC+B,GAAP,CAAW,MAAX,EAAmBF,EAAnB,CAAb;AACD;;AAEDK,EAAAA,YAAY,CAACL,EAAD,EAA6B;AACvC7B,IAAAA,MAAM,CAAC8B,EAAP,CAAU,aAAV,EAAyBD,EAAzB;AACA,WAAO,MAAM7B,MAAM,CAAC+B,GAAP,CAAW,aAAX,EAA0BF,EAA1B,CAAb;AACD;;AAEDM,EAAAA,YAAY,CAACN,EAAD,EAAqD;AAC/D7B,IAAAA,MAAM,CAAC8B,EAAP,CAAU,eAAV,EAA2BD,EAA3B;AACA,WAAO,MAAM7B,MAAM,CAAC+B,GAAP,CAAW,eAAX,EAA4BF,EAA5B,CAAb;AACD;;AAEDL,EAAAA,kBAAkB,GAAG;AACnBxB,IAAAA,MAAM,CAACwB,kBAAP;AACD;;AAEDP,EAAAA,SAAS,GAAW;AAClB,QAAI,KAAKf,MAAT,EAAiB,OAAO,KAAKA,MAAZ;AACjB,SAAKA,MAAL,GAAc,EAAd;AACA,SAAKA,MAAL,CAAYkC,IAAZ,GAAmBC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAnB;AACA,SAAKpC,MAAL,CAAYqC,GAAZ,GAAkBF,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAlB;AACA,WAAO,KAAKpC,MAAZ;AACD;;AA7GkD","sourcesContent":["import { GameServer, Player, Card } from \"../utils/interfaces\";\r\nimport { ServerInterface } from \"./ServerInterface\";\r\nimport { socket } from \"../api/socket\";\r\n\r\nexport class OnlineServer implements ServerInterface {\r\n  player?: Player;\r\n\r\n  getServers(): Promise<GameServer[]> {\r\n    return new Promise((res, rej) => {\r\n      socket.emit(\"get-servers\", null, (err: any, servers: GameServer[]) => {\r\n        if (err) return rej(err);\r\n        console.log(servers);\r\n\r\n        res(servers);\r\n      });\r\n    });\r\n  }\r\n  getServerPlayers(): Promise<Player[]> {\r\n    return new Promise((res, rej) => {\r\n      socket.emit(\"get-server-players\", null, (err: any, players: Player[]) => {\r\n        if (err) return rej(err);\r\n        res(players);\r\n      });\r\n    });\r\n  }\r\n  createServer(serverName: string, serverPassword?: string): Promise<string> {\r\n    return new Promise((res, rej) => {\r\n      socket.emit(\r\n        \"create-server\",\r\n        { serverName, serverPassword, player: this.getPlayer() },\r\n        (err: any, playerId: string) => {\r\n          if (err) return rej(err);\r\n          res(playerId);\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  joinServer(serverId: string, serverPassword?: string): Promise<string> {\r\n    return new Promise((res, rej) => {\r\n      socket.emit(\r\n        \"join-server\",\r\n        { serverId, serverPassword, player: this.getPlayer() },\r\n        (err: any, playerId: string) => {\r\n          if (err) {\r\n            return rej(err);\r\n          }\r\n          setTimeout(() => {\r\n            // socket.emit(\"add-bots\");\r\n          }, 2000);\r\n          res(playerId);\r\n        }\r\n      );\r\n    });\r\n  }\r\n  emitReady(): void {\r\n    socket.emit(\"start-game\");\r\n  }\r\n  leaveServer(): void {\r\n    socket.emit(\"leave-server\");\r\n    this.removeAllListeners();\r\n  }\r\n  move(draw: boolean | null, cardId: string): Promise<void> {\r\n    return new Promise((res, rej) => {\r\n      socket.emit(\"move\", { cardId, draw }, (err: any) => {\r\n        if (err) return rej(err);\r\n        res();\r\n      });\r\n    });\r\n  }\r\n  onPlayersUpdated(cb: (players: Player[]) => void): () => void {\r\n    socket.on(\"players-changed\", cb);\r\n    return () => socket.off(\"players-changed\", cb);\r\n  }\r\n\r\n  onGameInit(\r\n    cb: (data: { players: Player[]; cards: Card[] }) => void\r\n  ): () => void {\r\n    socket.on(\"init-game\", cb);\r\n    return () => socket.off(\"init-game\", cb);\r\n  }\r\n  onMove(\r\n    cb: (data: {\r\n      nxtPlayer: number;\r\n      card: Card;\r\n      draw?: number | undefined;\r\n      cardsToDraw?: Card[] | undefined;\r\n    }) => void\r\n  ): () => void {\r\n    socket.on(\"move\", cb);\r\n    return () => socket.off(\"move\", cb);\r\n  }\r\n\r\n  onPlayerLeft(cb: () => void): () => void {\r\n    socket.on(\"player-left\", cb);\r\n    return () => socket.off(\"player-left\", cb);\r\n  }\r\n\r\n  onFinishGame(cb: (playersOrdered: Player[]) => void): () => void {\r\n    socket.on(\"finished-game\", cb);\r\n    return () => socket.off(\"finished-game\", cb);\r\n  }\r\n\r\n  removeAllListeners() {\r\n    socket.removeAllListeners();\r\n  }\r\n\r\n  getPlayer(): Player {\r\n    if (this.player) return this.player;\r\n    this.player = {} as Player;\r\n    this.player.name = localStorage.getItem(\"playerName\") as string;\r\n    this.player.img = localStorage.getItem(\"playerImg\") as string;\r\n    return this.player;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}