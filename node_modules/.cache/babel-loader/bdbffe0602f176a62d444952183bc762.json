{"ast":null,"code":"import { EventsObject } from \"../utils/EventsObject\";\nimport { shuffle, wrapMod } from \"../utils/helpers\";\nimport data from \"./data.json\";\nexport default class BotsServer extends EventsObject {\n  constructor() {\n    let numberOfPlayers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4;\n    super();\n    this.players = [];\n    this.curPlayer = 0;\n    this.direction = 1;\n    this.tableStk = [];\n    this.drawingStk = [];\n    this.sumDrawing = 0;\n    this.lastPlayerDrew = false;\n    this.playersFinished = [];\n    this.gameRunning = false;\n    this.numberOfPlayers = 4;\n    this.botTimeout = null;\n    this.numberOfPlayers = numberOfPlayers;\n  }\n\n  init() {\n    this.players = [];\n    this.curPlayer = 0;\n    this.direction = 1;\n    this.tableStk = [];\n    this.drawingStk = [];\n    this.sumDrawing = 0;\n    this.playersFinished = [];\n    this.lastPlayerDrew = false;\n    this.gameRunning = false;\n  }\n\n  joinPlayer(player) {\n    const playerId = this.players.length.toString();\n    this.players.push({ ...player,\n      id: playerId,\n      cards: []\n    });\n    return playerId;\n  }\n\n  addBots() {\n    const numToAdd = this.numberOfPlayers - this.players.length;\n\n    for (let i = 0; i < numToAdd; i++) {\n      const bot = data.players[i];\n      const playerId = this.players.length.toString();\n      this.players.push({ ...bot,\n        id: playerId,\n        cards: [],\n        isBot: true\n      });\n    }\n\n    this.fireEvent(\"players-changed\", this.players);\n    if (this.players.length === this.numberOfPlayers) setTimeout(() => {\n      this.start();\n    }, 1000);\n  }\n\n  start() {\n    var _this$players$find;\n\n    const cards = [...data.cards];\n    shuffle(cards);\n    shuffle(this.players);\n    const NUM_CARDS = 7;\n    this.players.forEach((player, idx) => {\n      player.cards = cards.slice(idx * NUM_CARDS, (idx + 1) * NUM_CARDS);\n    });\n    this.drawingStk = cards.slice(this.players.length * NUM_CARDS, cards.length);\n    this.fireEvent(\"game-init\", {\n      cards: (_this$players$find = this.players.find(p => !p.isBot)) === null || _this$players$find === void 0 ? void 0 : _this$players$find.cards,\n      players: this.players.map(p => ({ ...p,\n        cards: []\n      }))\n    });\n  }\n\n  ready() {\n    if (this.players[this.curPlayer].isBot) this.moveBot();\n  }\n\n  move(draw, cardId) {\n    let moveEventObj = {\n      nxtPlayer: 0,\n      curPlayer: 0\n    };\n    let card;\n    if (cardId) card = getCardById(cardId);\n    if (card && !canPlayCard(this.tableStk[0], card, this.lastPlayerDrew)) return false;\n\n    if (draw) {\n      let drawCnt = 1;\n\n      if (this.sumDrawing) {\n        drawCnt = this.sumDrawing;\n        this.sumDrawing = 0;\n      }\n\n      moveEventObj.draw = drawCnt;\n\n      if (drawCnt + 1 > this.drawingStk.length) {\n        this.drawingStk = shuffle(this.tableStk.slice(5, this.tableStk.length));\n        this.tableStk = this.tableStk.slice(0, 5);\n      }\n\n      moveEventObj.cardsToDraw = this.drawingStk.slice(0, drawCnt);\n      this.players[this.curPlayer].cards = this.drawingStk.slice(0, drawCnt).concat(this.players[this.curPlayer].cards);\n      this.drawingStk = this.drawingStk.slice(drawCnt, this.drawingStk.length);\n      this.lastPlayerDrew = true;\n    }\n\n    let nxtPlayer = this.getNextPlayer(card);\n    moveEventObj.curPlayer = this.curPlayer;\n    moveEventObj.nxtPlayer = nxtPlayer;\n\n    if (card) {\n      if (card.action === \"draw two\") this.sumDrawing += 2;\n      if (card.action === \"draw four\") this.sumDrawing += 4;\n      this.tableStk.unshift(card);\n      moveEventObj.card = card;\n      this.players[this.curPlayer].cards = this.players[this.curPlayer].cards.filter(c => {\n        var _card;\n\n        return c.id !== ((_card = card) === null || _card === void 0 ? void 0 : _card.id);\n      });\n      this.lastPlayerDrew = false; // Check if game finished\n\n      if (this.players[this.curPlayer].cards.length === 0) this.playersFinished.push(this.curPlayer);\n\n      if (this.playersFinished.length === this.players.length - 1) {\n        this.playersFinished.push(nxtPlayer);\n        this.finishGame();\n        this.fireEvent(\"move\", moveEventObj);\n        return;\n      }\n    }\n\n    this.curPlayer = nxtPlayer;\n    this.fireEvent(\"move\", moveEventObj);\n    if (this.players[this.curPlayer].isBot) this.moveBot();\n  }\n\n  getNextPlayer(card) {\n    var _this = this;\n\n    let nxtPlayer = this.curPlayer;\n    if ((card === null || card === void 0 ? void 0 : card.action) === \"reverse\") this.direction *= -1;\n\n    const moveForward = function () {\n      let steps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n      while (steps--) {\n        nxtPlayer = wrapMod(nxtPlayer + 1 * _this.direction, _this.players.length);\n\n        while (_this.players[nxtPlayer].cards.length === 0) nxtPlayer = wrapMod(nxtPlayer + 1 * _this.direction, _this.players.length);\n      }\n    }; //Move to next player ( if not wild card )\n\n\n    if ((card === null || card === void 0 ? void 0 : card.action) === \"skip\") {\n      moveForward(2);\n    } else if ((card === null || card === void 0 ? void 0 : card.action) !== \"wild\") moveForward();\n\n    return nxtPlayer;\n  }\n\n  moveBot() {\n    setTimeout(() => {\n      for (let i = 0; i < this.players[this.curPlayer].cards.length; i++) {\n        const card = this.players[this.curPlayer].cards[i];\n        if (canPlayCard(this.tableStk[0], card, this.lastPlayerDrew)) return this.move(false, card.id);\n      }\n\n      return this.move(true, null);\n    }, 1500);\n  }\n\n  finishGame() {\n    const playersFinishingOrder = this.playersFinished.map(idx => this.players[idx]);\n    this.init();\n    this.fireEvent(\"finish-game\", playersFinishingOrder);\n  }\n\n}\nexport function canPlayCard(oldCard, newCard, lastPlayerDrew) {\n  const isOldDawingCard = (oldCard === null || oldCard === void 0 ? void 0 : oldCard.action) && oldCard.action.indexOf(\"draw\") !== -1;\n  const haveToDraw = isOldDawingCard && !lastPlayerDrew;\n  const isNewDawingCard = (newCard === null || newCard === void 0 ? void 0 : newCard.action) && newCard.action.indexOf(\"draw\") !== -1; //No Card Played Yet\n\n  if (!oldCard) return true;\n  if (!haveToDraw && newCard.action === \"wild\") return true;\n  if (newCard.action === \"draw four\") return true;\n  if (oldCard.color === \"black\" && !haveToDraw) return true;\n  if (haveToDraw && isNewDawingCard) return true;\n  if (!haveToDraw && oldCard.color === newCard.color) return true;\n  if (oldCard.digit !== undefined && oldCard.digit === newCard.digit) return true;\n  return false;\n}\n\nconst getCardById = id => data.cards.find(c => c.id === id);","map":{"version":3,"sources":["C:/Users/NCC/Desktop/WorkSpace/uno/src/BotsServer/BotsServer.ts"],"names":["EventsObject","shuffle","wrapMod","data","BotsServer","constructor","numberOfPlayers","players","curPlayer","direction","tableStk","drawingStk","sumDrawing","lastPlayerDrew","playersFinished","gameRunning","botTimeout","init","joinPlayer","player","playerId","length","toString","push","id","cards","addBots","numToAdd","i","bot","isBot","fireEvent","setTimeout","start","NUM_CARDS","forEach","idx","slice","find","p","map","ready","moveBot","move","draw","cardId","moveEventObj","nxtPlayer","card","getCardById","canPlayCard","drawCnt","cardsToDraw","concat","getNextPlayer","action","unshift","filter","c","finishGame","moveForward","steps","playersFinishingOrder","oldCard","newCard","isOldDawingCard","indexOf","haveToDraw","isNewDawingCard","color","digit","undefined"],"mappings":"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","sourcesContent":["import { EventsObject } from \"../utils/EventsObject\";\r\nimport { shuffle, wrapMod } from \"../utils/helpers\";\r\nimport { Card, Player } from \"../utils/interfaces\";\r\nimport data from \"./data.json\";\r\n\r\nexport interface IMoveEvent {\r\n  curPlayer: number;\r\n  nxtPlayer: number;\r\n  card?: Card;\r\n  draw?: number;\r\n  cardsToDraw?: Card[];\r\n}\r\n\r\nexport interface IStartEvent {\r\n  cards: Card[];\r\n  players: Player[];\r\n  playerId: string;\r\n}\r\n\r\nexport default class BotsServer extends EventsObject {\r\n  players: Player[] = [];\r\n  curPlayer = 0;\r\n  direction = 1;\r\n  tableStk: Card[] = [];\r\n  drawingStk: Card[] = [];\r\n  sumDrawing = 0;\r\n  lastPlayerDrew = false;\r\n  playersFinished: number[] = [];\r\n  gameRunning = false;\r\n  numberOfPlayers = 4;\r\n\r\n  botTimeout = null;\r\n\r\n  constructor(numberOfPlayers = 4) {\r\n    super();\r\n    this.numberOfPlayers = numberOfPlayers;\r\n  }\r\n\r\n  init() {\r\n    this.players = [];\r\n    this.curPlayer = 0;\r\n    this.direction = 1;\r\n    this.tableStk = [];\r\n    this.drawingStk = [];\r\n    this.sumDrawing = 0;\r\n    this.playersFinished = [];\r\n    this.lastPlayerDrew = false;\r\n    this.gameRunning = false;\r\n  }\r\n\r\n  joinPlayer(player: Player) {\r\n    const playerId = this.players.length.toString();\r\n\r\n    this.players.push({\r\n      ...player,\r\n      id: playerId,\r\n      cards: [],\r\n    });\r\n\r\n    return playerId;\r\n  }\r\n\r\n  addBots() {\r\n    const numToAdd = this.numberOfPlayers - this.players.length;\r\n    for (let i = 0; i < numToAdd; i++) {\r\n      const bot = data.players[i];\r\n      const playerId = this.players.length.toString();\r\n      this.players.push({\r\n        ...bot,\r\n        id: playerId,\r\n        cards: [],\r\n        isBot: true,\r\n      });\r\n    }\r\n    this.fireEvent(\"players-changed\", this.players);\r\n    if (this.players.length === this.numberOfPlayers)\r\n      setTimeout(() => {\r\n        this.start();\r\n      }, 1000);\r\n  }\r\n\r\n  start() {\r\n    const cards = [...data.cards] as Card[];\r\n    shuffle(cards);\r\n    shuffle(this.players);\r\n    const NUM_CARDS = 7;\r\n    this.players.forEach((player, idx) => {\r\n      player.cards = cards.slice(idx * NUM_CARDS, (idx + 1) * NUM_CARDS);\r\n    });\r\n    this.drawingStk = cards.slice(\r\n      this.players.length * NUM_CARDS,\r\n      cards.length\r\n    );\r\n\r\n    this.fireEvent(\"game-init\", {\r\n      cards: this.players.find((p) => !p.isBot)?.cards,\r\n      players: this.players.map((p) => ({ ...p, cards: [] })),\r\n    });\r\n  }\r\n\r\n  ready() {\r\n    if (this.players[this.curPlayer].isBot) this.moveBot();\r\n  }\r\n\r\n  move(draw: boolean | null, cardId: string | null) {\r\n    let moveEventObj: IMoveEvent = { nxtPlayer: 0, curPlayer: 0 };\r\n    let card: Card | undefined;\r\n\r\n    if (cardId) card = getCardById(cardId) as Card;\r\n\r\n    if (card && !canPlayCard(this.tableStk[0], card, this.lastPlayerDrew))\r\n      return false;\r\n\r\n    if (draw) {\r\n      let drawCnt = 1;\r\n      if (this.sumDrawing) {\r\n        drawCnt = this.sumDrawing;\r\n        this.sumDrawing = 0;\r\n      }\r\n\r\n      moveEventObj.draw = drawCnt;\r\n      if (drawCnt + 1 > this.drawingStk.length) {\r\n        this.drawingStk = shuffle(this.tableStk.slice(5, this.tableStk.length));\r\n        this.tableStk = this.tableStk.slice(0, 5);\r\n      }\r\n\r\n      moveEventObj.cardsToDraw = this.drawingStk.slice(0, drawCnt);\r\n      this.players[this.curPlayer].cards = this.drawingStk\r\n        .slice(0, drawCnt)\r\n        .concat(this.players[this.curPlayer].cards);\r\n\r\n      this.drawingStk = this.drawingStk.slice(drawCnt, this.drawingStk.length);\r\n      this.lastPlayerDrew = true;\r\n    }\r\n\r\n    let nxtPlayer = this.getNextPlayer(card);\r\n\r\n    moveEventObj.curPlayer = this.curPlayer;\r\n    moveEventObj.nxtPlayer = nxtPlayer;\r\n\r\n    if (card) {\r\n      if (card.action === \"draw two\") this.sumDrawing += 2;\r\n      if (card.action === \"draw four\") this.sumDrawing += 4;\r\n\r\n      this.tableStk.unshift(card);\r\n      moveEventObj.card = card;\r\n      this.players[this.curPlayer].cards = this.players[\r\n        this.curPlayer\r\n      ].cards.filter((c) => c.id !== card?.id);\r\n      this.lastPlayerDrew = false;\r\n\r\n      // Check if game finished\r\n      if (this.players[this.curPlayer].cards.length === 0)\r\n        this.playersFinished.push(this.curPlayer);\r\n      if (this.playersFinished.length === this.players.length - 1) {\r\n        this.playersFinished.push(nxtPlayer);\r\n        this.finishGame();\r\n        this.fireEvent(\"move\", moveEventObj as IMoveEvent);\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.curPlayer = nxtPlayer;\r\n\r\n    this.fireEvent(\"move\", moveEventObj as IMoveEvent);\r\n\r\n    if (this.players[this.curPlayer].isBot) this.moveBot();\r\n  }\r\n\r\n  getNextPlayer(card?: Card) {\r\n    let nxtPlayer = this.curPlayer;\r\n\r\n    if (card?.action === \"reverse\") this.direction *= -1;\r\n\r\n    const moveForward = (steps: number = 1) => {\r\n      while (steps--) {\r\n        nxtPlayer = wrapMod(\r\n          nxtPlayer + 1 * this.direction,\r\n          this.players.length\r\n        );\r\n        while (this.players[nxtPlayer].cards.length === 0)\r\n          nxtPlayer = wrapMod(\r\n            nxtPlayer + 1 * this.direction,\r\n            this.players.length\r\n          );\r\n      }\r\n    };\r\n\r\n    //Move to next player ( if not wild card )\r\n    if (card?.action === \"skip\") {\r\n      moveForward(2);\r\n    } else if (card?.action !== \"wild\") moveForward();\r\n\r\n    return nxtPlayer;\r\n  }\r\n\r\n  moveBot() {\r\n    setTimeout(() => {\r\n      for (let i = 0; i < this.players[this.curPlayer].cards.length; i++) {\r\n        const card = this.players[this.curPlayer].cards[i];\r\n\r\n        if (canPlayCard(this.tableStk[0], card, this.lastPlayerDrew))\r\n          return this.move(false, card.id as string);\r\n      }\r\n\r\n      return this.move(true, null);\r\n    }, 1500);\r\n  }\r\n\r\n  finishGame() {\r\n    const playersFinishingOrder = this.playersFinished.map(\r\n      (idx) => this.players[idx]\r\n    );\r\n\r\n    this.init();\r\n    this.fireEvent(\"finish-game\", playersFinishingOrder);\r\n  }\r\n}\r\n\r\nexport function canPlayCard(\r\n  oldCard: Card,\r\n  newCard: Card,\r\n  lastPlayerDrew: boolean\r\n) {\r\n  const isOldDawingCard =\r\n    oldCard?.action && oldCard.action.indexOf(\"draw\") !== -1;\r\n  const haveToDraw = isOldDawingCard && !lastPlayerDrew;\r\n  const isNewDawingCard =\r\n    newCard?.action && newCard.action.indexOf(\"draw\") !== -1;\r\n\r\n  //No Card Played Yet\r\n  if (!oldCard) return true;\r\n\r\n  if (!haveToDraw && newCard.action === \"wild\") return true;\r\n\r\n  if (newCard.action === \"draw four\") return true;\r\n\r\n  if (oldCard.color === \"black\" && !haveToDraw) return true;\r\n\r\n  if (haveToDraw && isNewDawingCard) return true;\r\n\r\n  if (!haveToDraw && oldCard.color === newCard.color) return true;\r\n\r\n  if (oldCard.digit !== undefined && oldCard.digit === newCard.digit)\r\n    return true;\r\n\r\n  return false;\r\n}\r\n\r\nconst getCardById = (id: string) => data.cards.find((c) => c.id === id);\r\n"]},"metadata":{},"sourceType":"module"}