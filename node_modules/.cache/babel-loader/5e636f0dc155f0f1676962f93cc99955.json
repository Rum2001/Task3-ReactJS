{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\NCC\\\\Desktop\\\\WorkSpace\\\\Task3-ReactJS\\\\src\\\\Components\\\\CreateServer\\\\CreateServer.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport Stack from \"@mui/material/Stack\";\nimport Paper from \"../Shared/Paper/Paper\";\nimport Button from \"../Shared/Button/Button\";\nimport TextField from \"../Shared/TextField/TextField\";\nimport Switch from \"../Shared/Switch/Switch\";\nimport { useNavigate } from \"react-router-dom\";\nimport API from \"../../api/API.ts\";\nimport Typography from \"../Shared/Typography/Typography\";\nimport { useDispatch } from \"../../utils/hooks\";\nimport { setInLobby, setPlayerId } from \"../../stores/features/gameSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CreateServer = () => {\n  _s();\n\n  const [serverName, setServerName] = React.useState(\"\");\n  const [serverPassword, setServerPassword] = React.useState(\"\");\n  const [isPrivate, setIsPrivate] = React.useState(true);\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const handleCreateServer = async () => {\n    const playerId = await API.createServer(serverName, serverPassword);\n    dispatch(setPlayerId(playerId));\n    dispatch(setInLobby(true));\n    navigate(\"/waiting-lobby\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 10,\n        children: /*#__PURE__*/_jsxDEV(Stack, {\n          justifyContent: \"center\",\n          spacing: 1,\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: \"Choose A Server Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"server-name\",\n            value: serverName,\n            onChange: e => setServerName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 10,\n        sm: 8,\n        md: 6,\n        lg: 5,\n        marginTop: 2,\n        children: /*#__PURE__*/_jsxDEV(Stack, {\n          direction: \"row\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          gap: \"32px\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: `${isPrivate ? \"white\" : \"gray\"}`,\n              textShadow: `${isPrivate ? \"0 0 3px white\" : \"\"}`\n            },\n            children: \"Private\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Switch, {\n            onChange: () => {\n              setIsPrivate(!isPrivate);\n              setServerPassword(\"\");\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: `${!isPrivate ? \"white\" : \"gray\"}`,\n              textShadow: `${!isPrivate ? \"0 0 3px white\" : \"\"}`\n            },\n            children: \"Public\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), isPrivate && /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 10,\n        marginTop: 2,\n        children: /*#__PURE__*/_jsxDEV(Stack, {\n          justifyContent: \"center\",\n          spacing: 1,\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: \"Server Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            type: \"password\",\n            label: \"server-password\",\n            value: serverPassword,\n            onChange: e => setServerPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 10,\n        lg: 8,\n        children: (isPrivate && serverName && serverPassword || !isPrivate && serverName) && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleCreateServer,\n          children: \"Creat Server\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CreateServer, \"4vdsOrP4NaXNI+faOZjHIUGUD8I=\", false, function () {\n  return [useNavigate, useDispatch];\n});\n\n_c = CreateServer;\nexport default CreateServer;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateServer\");","map":{"version":3,"sources":["C:/Users/NCC/Desktop/WorkSpace/Task3-ReactJS/src/Components/CreateServer/CreateServer.jsx"],"names":["React","Grid","Stack","Paper","Button","TextField","Switch","useNavigate","API","Typography","useDispatch","setInLobby","setPlayerId","CreateServer","serverName","setServerName","useState","serverPassword","setServerPassword","isPrivate","setIsPrivate","navigate","dispatch","handleCreateServer","playerId","createServer","e","target","value","color","textShadow"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport Paper from \"../Shared/Paper/Paper\";\r\nimport Button from \"../Shared/Button/Button\";\r\nimport TextField from \"../Shared/TextField/TextField\";\r\nimport Switch from \"../Shared/Switch/Switch\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport API from \"../../api/API.ts\";\r\n\r\nimport Typography from \"../Shared/Typography/Typography\";\r\nimport { useDispatch } from \"../../utils/hooks\";\r\nimport { setInLobby, setPlayerId } from \"../../stores/features/gameSlice\";\r\n\r\nconst CreateServer = () => {\r\n  const [serverName, setServerName] = React.useState(\"\");\r\n  const [serverPassword, setServerPassword] = React.useState(\"\");\r\n  const [isPrivate, setIsPrivate] = React.useState(true);\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n\r\n  const handleCreateServer = async () => {\r\n    const playerId = await API.createServer(serverName, serverPassword);\r\n    dispatch(setPlayerId(playerId));\r\n    dispatch(setInLobby(true));\r\n    navigate(\"/waiting-lobby\");\r\n  };\r\n  return (\r\n    <Paper>\r\n      <Grid container justifyContent=\"center\" alignItems=\"center\" spacing={2}>\r\n        <Grid item xs={12} md={10}>\r\n          <Stack justifyContent=\"center\" spacing={1} alignItems=\"center\">\r\n            <Typography>Choose A Server Name</Typography>\r\n\r\n            <TextField\r\n              label=\"server-name\"\r\n              value={serverName}\r\n              onChange={(e) => setServerName(e.target.value)}\r\n            />\r\n          </Stack>\r\n        </Grid>\r\n        <Grid item xs={10} sm={8} md={6} lg={5} marginTop={2}>\r\n          <Stack\r\n            direction=\"row\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            gap=\"32px\"\r\n          >\r\n            <p\r\n              style={{\r\n                color: `${isPrivate ? \"white\" : \"gray\"}`,\r\n                textShadow: `${isPrivate ? \"0 0 3px white\" : \"\"}`,\r\n              }}\r\n            >\r\n              Private\r\n            </p>\r\n            <Switch\r\n              onChange={() => {\r\n                setIsPrivate(!isPrivate);\r\n                setServerPassword(\"\");\r\n              }}\r\n            />\r\n            <p\r\n              style={{\r\n                color: `${!isPrivate ? \"white\" : \"gray\"}`,\r\n                textShadow: `${!isPrivate ? \"0 0 3px white\" : \"\"}`,\r\n              }}\r\n            >\r\n              Public\r\n            </p>\r\n          </Stack>\r\n        </Grid>\r\n        {isPrivate && (\r\n          <Grid item xs={12} md={10} marginTop={2}>\r\n            <Stack justifyContent=\"center\" spacing={1} alignItems=\"center\">\r\n              <Typography>Server Password</Typography>\r\n\r\n              <TextField\r\n                type=\"password\"\r\n                label=\"server-password\"\r\n                value={serverPassword}\r\n                onChange={(e) => setServerPassword(e.target.value)}\r\n              />\r\n            </Stack>\r\n          </Grid>\r\n        )}\r\n\r\n        <Grid item xs={12} md={10} lg={8}>\r\n          {((isPrivate && serverName && serverPassword) ||\r\n            (!isPrivate && serverName)) && (\r\n            <Button onClick={handleCreateServer}>Creat Server</Button>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default CreateServer;\r\n"]},"metadata":{},"sourceType":"module"}