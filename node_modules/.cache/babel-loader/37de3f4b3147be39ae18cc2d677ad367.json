{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\NCC\\\\Desktop\\\\WorkSpace\\\\uno\\\\src\\\\Components\\\\Game\\\\Game.tsx\",\n    _s = $RefreshSig$();\n\nimport { AnimateSharedLayout } from \"framer-motion\";\nimport TableStack from \"./TableStack/TableStack.jsx\";\nimport PlayerStack from \"./PlayerStack/PlayerStack.jsx\";\nimport { useEffect, useState } from \"react\";\nimport LeftStack from \"./LeftStack/LeftStack.jsx\";\nimport RightStack from \"./RightStack/RightStack.jsx\";\nimport TopStack from \"./TopStack/TopStack.jsx\";\nimport DrawingStack from \"./DrawingStack/DrawingStack.jsx\";\nimport { useDispatch, useSelector } from \"../../utils/hooks\";\nimport { moveCard, movePlayer, stopGame } from \"../../stores/features/gameSlice\";\nimport Scoreboard from \"./Scoreboard/Scoreboard.jsx\";\nimport API from \"../../api/API\";\nimport { Navigate } from \"react-router\";\nimport GameAudio from \"../../utils/audio.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Game() {\n  _s();\n\n  const dispatch = useDispatch();\n  const [finished, setFinished] = useState(false);\n  const [playersOrder, setPlayersOrder] = useState([]);\n  const inGame = useSelector(state => state.game.inGame);\n  useEffect(() => {\n    const timeoutReady = setTimeout(() => {\n      API.emitReady();\n    }, 2000);\n    API.onMove(_ref => {\n      let {\n        card,\n        draw,\n        cardsToDraw,\n        nxtPlayer\n      } = _ref;\n      dispatch(moveCard({\n        nextPlayer: nxtPlayer,\n        card,\n        draw,\n        cardsToDraw\n      }));\n\n      if (draw) {\n        GameAudio.playAudio('draw', draw);\n      } else GameAudio.playAudio('play');\n\n      setTimeout(() => dispatch(movePlayer()), 500);\n    });\n    API.onFinishGame(players => {\n      setFinished(true);\n      setPlayersOrder(players);\n    });\n    return () => {\n      API.leaveServer();\n      dispatch(stopGame());\n      clearTimeout(timeoutReady);\n    };\n  }, [dispatch]);\n  if (!inGame) return /*#__PURE__*/_jsxDEV(Navigate, {\n    replace: true,\n    to: \"/main-menu\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(AnimateSharedLayout, {\n      children: [/*#__PURE__*/_jsxDEV(TableStack, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TopStack, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LeftStack, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RightStack, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PlayerStack, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DrawingStack, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), finished && /*#__PURE__*/_jsxDEV(Scoreboard, {\n      players: playersOrder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Game, \"zvE4Uw5JHkQt+mdR9J52M5BDS7k=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["C:/Users/NCC/Desktop/WorkSpace/uno/src/Components/Game/Game.tsx"],"names":["AnimateSharedLayout","TableStack","PlayerStack","useEffect","useState","LeftStack","RightStack","TopStack","DrawingStack","useDispatch","useSelector","moveCard","movePlayer","stopGame","Scoreboard","API","Navigate","GameAudio","Game","dispatch","finished","setFinished","playersOrder","setPlayersOrder","inGame","state","game","timeoutReady","setTimeout","emitReady","onMove","card","draw","cardsToDraw","nxtPlayer","nextPlayer","playAudio","onFinishGame","players","leaveServer","clearTimeout"],"mappings":"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","sourcesContent":["import { AnimateSharedLayout } from \"framer-motion\";\r\nimport TableStack from \"./TableStack/TableStack.jsx\";\r\nimport PlayerStack from \"./PlayerStack/PlayerStack.jsx\";\r\nimport { useEffect, useState } from \"react\";\r\nimport LeftStack from \"./LeftStack/LeftStack.jsx\";\r\nimport RightStack from \"./RightStack/RightStack.jsx\";\r\nimport TopStack from \"./TopStack/TopStack.jsx\";\r\nimport DrawingStack from \"./DrawingStack/DrawingStack.jsx\";\r\nimport { useDispatch, useSelector } from \"../../utils/hooks\";\r\nimport {\r\n  moveCard,\r\n  movePlayer,\r\n  stopGame,\r\n} from \"../../stores/features/gameSlice\";\r\nimport Scoreboard from \"./Scoreboard/Scoreboard.jsx\";\r\nimport { Player } from \"../../utils/interfaces.js\";\r\nimport API from \"../../api/API\";\r\nimport { Navigate, } from \"react-router\";\r\nimport GameAudio from \"../../utils/audio.js\";\r\n\r\nexport default function Game() {\r\n  const dispatch = useDispatch();\r\n  const [finished, setFinished] = useState(false)\r\n  const [playersOrder, setPlayersOrder] = useState<Player[]>([]);\r\n  const inGame = useSelector(state => state.game.inGame)\r\n\r\n\r\n  useEffect(() => {\r\n    const timeoutReady = setTimeout(() => {\r\n      API.emitReady()\r\n    }, 2000)\r\n    API.onMove(({ card, draw, cardsToDraw, nxtPlayer }) => {\r\n\r\n      dispatch(\r\n        moveCard({\r\n          nextPlayer: nxtPlayer,\r\n          card,\r\n          draw,\r\n          cardsToDraw,\r\n        })\r\n      );\r\n      if (draw) {\r\n        GameAudio.playAudio('draw', draw);\r\n      } else GameAudio.playAudio('play')\r\n      setTimeout(() => dispatch(movePlayer()), 500);\r\n    })\r\n\r\n    API.onFinishGame((players: Player[]) => {\r\n      setFinished(true);\r\n      setPlayersOrder(players);\r\n    })\r\n\r\n    return () => {\r\n      API.leaveServer();\r\n      dispatch(stopGame());\r\n      clearTimeout(timeoutReady)\r\n    }\r\n  }, [dispatch]);\r\n\r\n\r\n  if (!inGame) return <Navigate replace to=\"/main-menu\" />;\r\n\r\n  return (\r\n    <div>\r\n      <AnimateSharedLayout>\r\n        <TableStack />\r\n        <TopStack />\r\n        <LeftStack />\r\n        <RightStack />\r\n        <PlayerStack />\r\n        <DrawingStack />\r\n      </AnimateSharedLayout>\r\n\r\n      {finished && <Scoreboard players={playersOrder} />}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}