{"ast":null,"code":"export class EventsObject {\n  constructor() {\n    this.events = {};\n\n    this.addEventListener = function (name, handler) {\n      if (this.events.hasOwnProperty(name)) this.events[name].push(handler);else this.events[name] = [handler];\n    };\n\n    this.removeEventListener = function (name, handler) {\n      /* This is a bit tricky, because how would you identify functions?\r\n             This simple solution should work if you pass THE SAME handler. */\n      if (!this.events.hasOwnProperty(name)) return;\n      var index = this.events[name].indexOf(handler);\n      if (index !== -1) this.events[name].splice(index, 1);\n    };\n  }\n\n  removeAllListeners() {\n    this.events = {};\n  }\n\n  fireEvent(name) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (!this.events.hasOwnProperty(name)) return;\n    if (!args) args = [];\n    var evs = this.events[name],\n        l = evs.length;\n\n    for (var i = 0; i < l; i++) {\n      evs[i](...args);\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/NCC/Desktop/WorkSpace/Task3-ReactJS/src/utils/EventsObject.js"],"names":["EventsObject","events","addEventListener","name","handler","hasOwnProperty","push","removeEventListener","index","indexOf","splice","removeAllListeners","fireEvent","args","evs","l","length","i"],"mappings":"AAAA,OAAO,MAAMA,YAAN,CAAmB;AAAA;AAAA,SACxBC,MADwB,GACf,EADe;;AAAA,SAGxBC,gBAHwB,GAGL,UAAUC,IAAV,EAAgBC,OAAhB,EAAyB;AAC1C,UAAI,KAAKH,MAAL,CAAYI,cAAZ,CAA2BF,IAA3B,CAAJ,EAAsC,KAAKF,MAAL,CAAYE,IAAZ,EAAkBG,IAAlB,CAAuBF,OAAvB,EAAtC,KACK,KAAKH,MAAL,CAAYE,IAAZ,IAAoB,CAACC,OAAD,CAApB;AACN,KANuB;;AAAA,SAQxBG,mBARwB,GAQF,UAAUJ,IAAV,EAAgBC,OAAhB,EAAyB;AAC7C;AACJ;AACI,UAAI,CAAC,KAAKH,MAAL,CAAYI,cAAZ,CAA2BF,IAA3B,CAAL,EAAuC;AAEvC,UAAIK,KAAK,GAAG,KAAKP,MAAL,CAAYE,IAAZ,EAAkBM,OAAlB,CAA0BL,OAA1B,CAAZ;AACA,UAAII,KAAK,KAAK,CAAC,CAAf,EAAkB,KAAKP,MAAL,CAAYE,IAAZ,EAAkBO,MAAlB,CAAyBF,KAAzB,EAAgC,CAAhC;AACnB,KAfuB;AAAA;;AAiBxBG,EAAAA,kBAAkB,GAAG;AACnB,SAAKV,MAAL,GAAc,EAAd;AACD;;AAEDW,EAAAA,SAAS,CAACT,IAAD,EAAgB;AAAA,sCAANU,IAAM;AAANA,MAAAA,IAAM;AAAA;;AACvB,QAAI,CAAC,KAAKZ,MAAL,CAAYI,cAAZ,CAA2BF,IAA3B,CAAL,EAAuC;AAEvC,QAAI,CAACU,IAAL,EAAWA,IAAI,GAAG,EAAP;AAEX,QAAIC,GAAG,GAAG,KAAKb,MAAL,CAAYE,IAAZ,CAAV;AAAA,QACEY,CAAC,GAAGD,GAAG,CAACE,MADV;;AAGA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,CAApB,EAAuBE,CAAC,EAAxB,EAA4B;AAC1BH,MAAAA,GAAG,CAACG,CAAD,CAAH,CAAO,GAAGJ,IAAV;AACD;AACF;;AAhCuB","sourcesContent":["export class EventsObject {\r\n  events = {};\r\n\r\n  addEventListener = function (name, handler) {\r\n    if (this.events.hasOwnProperty(name)) this.events[name].push(handler);\r\n    else this.events[name] = [handler];\r\n  };\r\n\r\n  removeEventListener = function (name, handler) {\r\n    /* This is a bit tricky, because how would you identify functions?\r\n           This simple solution should work if you pass THE SAME handler. */\r\n    if (!this.events.hasOwnProperty(name)) return;\r\n\r\n    var index = this.events[name].indexOf(handler);\r\n    if (index !== -1) this.events[name].splice(index, 1);\r\n  };\r\n\r\n  removeAllListeners() {\r\n    this.events = {};\r\n  }\r\n\r\n  fireEvent(name, ...args) {\r\n    if (!this.events.hasOwnProperty(name)) return;\r\n\r\n    if (!args) args = [];\r\n\r\n    var evs = this.events[name],\r\n      l = evs.length;\r\n\r\n    for (var i = 0; i < l; i++) {\r\n      evs[i](...args);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}