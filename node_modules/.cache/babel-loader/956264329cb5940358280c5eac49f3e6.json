{"ast":null,"code":"import GameAudio from \"./audio\";\nimport { EventsObject } from \"./EventsObject\";\n\nclass _Loader extends EventsObject {\n  constructor() {\n    super();\n    this.imgs = [\"assets/images/backside.png\", \"assets/images/uno-logo.png\", \"assets/images/draw four-blank.png\", \"assets/images/draw two-blank.png\", \"assets/images/draw two-blue.png\", \"assets/images/draw two-green.png\", \"assets/images/draw two-red.png\", \"assets/images/draw two-yellow.png\", \"assets/images/draw4.png\", \"assets/images/front-black.png\", \"assets/images/front-blue.png\", \"assets/images/front-green.png\", \"assets/images/front-red.png\", \"assets/images/front-yellow.png\", \"assets/images/reverse-blank.png\", \"assets/images/reverse-blue.png\", \"assets/images/reverse-green.png\", \"assets/images/reverse-red.png\", \"assets/images/reverse-yellow.png\", \"assets/images/skip-blank.png\", \"assets/images/skip-blue.png\", \"assets/images/skip-green.png\", \"assets/images/skip-red.png\", \"assets/images/skip-yellow.png\", \"assets/images/wild.png\"];\n    this.audios = {\n      music: \"assets/audio/bg-music.mp3\",\n      shuffle: \"assets/audio/shuffle.mp3\",\n      play: \"assets/audio/play.mp3\",\n      draw: \"assets/audio/draw.mp3\"\n    };\n    this.totalCnt = 0;\n    this.loadedCnt = 0;\n    this.onProgress = this.onProgress.bind(this);\n  }\n\n  load() {\n    this.totalCnt = this.imgs.length + Object.keys(this.audios).length;\n    this.loadedCnt = 0;\n    GameAudio.preload(this.audios, this.onProgress);\n\n    for (const img of this.imgs) {\n      this.preloadImage(img);\n    }\n  }\n\n  preloadImage(url) {\n    try {\n      var _img = new Image();\n\n      _img.src = url;\n      _img.onload = this.onProgress;\n    } catch (e) {\n      console.error(\"Failed Loading Images\");\n      console.error(e);\n    }\n  }\n\n  onProgress() {\n    this.loadedCnt++;\n    this.fireEvent(\"progress\", this.loadedCnt / this.totalCnt);\n    if (this.loadedCnt === this.totalCnt) this.fireEvent(\"completed\");\n  }\n\n}\n\nconst Loader = new _Loader();\nexport default Loader;","map":{"version":3,"sources":["C:/Users/NCC/Desktop/WorkSpace/uno/src/utils/loader.ts"],"names":["GameAudio","EventsObject","_Loader","constructor","imgs","audios","music","shuffle","play","draw","totalCnt","loadedCnt","onProgress","bind","load","length","Object","keys","preload","img","preloadImage","url","_img","Image","src","onload","e","console","error","fireEvent","Loader"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,SAAtB;AACA,SAASC,YAAT,QAA6B,gBAA7B;;AAEA,MAAMC,OAAN,SAAsBD,YAAtB,CAAmC;AAsCjCE,EAAAA,WAAW,GAAG;AACZ;AADY,SArCdC,IAqCc,GArCP,CACL,4BADK,EAEL,4BAFK,EAGL,mCAHK,EAIL,kCAJK,EAKL,iCALK,EAML,kCANK,EAOL,gCAPK,EAQL,mCARK,EASL,yBATK,EAUL,+BAVK,EAWL,8BAXK,EAYL,+BAZK,EAaL,6BAbK,EAcL,gCAdK,EAeL,iCAfK,EAgBL,gCAhBK,EAiBL,iCAjBK,EAkBL,+BAlBK,EAmBL,kCAnBK,EAoBL,8BApBK,EAqBL,6BArBK,EAsBL,8BAtBK,EAuBL,4BAvBK,EAwBL,+BAxBK,EAyBL,wBAzBK,CAqCO;AAAA,SAVdC,MAUc,GAVL;AACPC,MAAAA,KAAK,EAAE,2BADA;AAEPC,MAAAA,OAAO,EAAE,0BAFF;AAGPC,MAAAA,IAAI,EAAE,uBAHC;AAIPC,MAAAA,IAAI,EAAE;AAJC,KAUK;AAAA,SAHdC,QAGc,GAHH,CAGG;AAAA,SAFdC,SAEc,GAFF,CAEE;AAEZ,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACD;;AAEDC,EAAAA,IAAI,GAAG;AACL,SAAKJ,QAAL,GAAgB,KAAKN,IAAL,CAAUW,MAAV,GAAmBC,MAAM,CAACC,IAAP,CAAY,KAAKZ,MAAjB,EAAyBU,MAA5D;AACA,SAAKJ,SAAL,GAAiB,CAAjB;AAEAX,IAAAA,SAAS,CAACkB,OAAV,CAAkB,KAAKb,MAAvB,EAA+B,KAAKO,UAApC;;AAEA,SAAK,MAAMO,GAAX,IAAkB,KAAKf,IAAvB,EAA6B;AAC3B,WAAKgB,YAAL,CAAkBD,GAAlB;AACD;AACF;;AAEDC,EAAAA,YAAY,CAACC,GAAD,EAAc;AACxB,QAAI;AACF,UAAIC,IAAI,GAAG,IAAIC,KAAJ,EAAX;;AACAD,MAAAA,IAAI,CAACE,GAAL,GAAWH,GAAX;AACAC,MAAAA,IAAI,CAACG,MAAL,GAAc,KAAKb,UAAnB;AACD,KAJD,CAIE,OAAOc,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,KAAR,CAAc,uBAAd;AACAD,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACD;AACF;;AAEDd,EAAAA,UAAU,GAAG;AACX,SAAKD,SAAL;AACA,SAAKkB,SAAL,CAAe,UAAf,EAA2B,KAAKlB,SAAL,GAAiB,KAAKD,QAAjD;AACA,QAAI,KAAKC,SAAL,KAAmB,KAAKD,QAA5B,EAAsC,KAAKmB,SAAL,CAAe,WAAf;AACvC;;AArEgC;;AAwEnC,MAAMC,MAAM,GAAG,IAAI5B,OAAJ,EAAf;AACA,eAAe4B,MAAf","sourcesContent":["import GameAudio from \"./audio\";\r\nimport { EventsObject } from \"./EventsObject\";\r\n\r\nclass _Loader extends EventsObject {\r\n  imgs = [\r\n    \"assets/images/backside.png\",\r\n    \"assets/images/uno-logo.png\",\r\n    \"assets/images/draw four-blank.png\",\r\n    \"assets/images/draw two-blank.png\",\r\n    \"assets/images/draw two-blue.png\",\r\n    \"assets/images/draw two-green.png\",\r\n    \"assets/images/draw two-red.png\",\r\n    \"assets/images/draw two-yellow.png\",\r\n    \"assets/images/draw4.png\",\r\n    \"assets/images/front-black.png\",\r\n    \"assets/images/front-blue.png\",\r\n    \"assets/images/front-green.png\",\r\n    \"assets/images/front-red.png\",\r\n    \"assets/images/front-yellow.png\",\r\n    \"assets/images/reverse-blank.png\",\r\n    \"assets/images/reverse-blue.png\",\r\n    \"assets/images/reverse-green.png\",\r\n    \"assets/images/reverse-red.png\",\r\n    \"assets/images/reverse-yellow.png\",\r\n    \"assets/images/skip-blank.png\",\r\n    \"assets/images/skip-blue.png\",\r\n    \"assets/images/skip-green.png\",\r\n    \"assets/images/skip-red.png\",\r\n    \"assets/images/skip-yellow.png\",\r\n    \"assets/images/wild.png\",\r\n  ];\r\n  audios = {\r\n    music: \"assets/audio/bg-music.mp3\",\r\n    shuffle: \"assets/audio/shuffle.mp3\",\r\n    play: \"assets/audio/play.mp3\",\r\n    draw: \"assets/audio/draw.mp3\",\r\n  };\r\n\r\n  totalCnt = 0;\r\n  loadedCnt = 0;\r\n\r\n  constructor() {\r\n    super();\r\n    this.onProgress = this.onProgress.bind(this);\r\n  }\r\n\r\n  load() {\r\n    this.totalCnt = this.imgs.length + Object.keys(this.audios).length;\r\n    this.loadedCnt = 0;\r\n\r\n    GameAudio.preload(this.audios, this.onProgress);\r\n\r\n    for (const img of this.imgs) {\r\n      this.preloadImage(img);\r\n    }\r\n  }\r\n\r\n  preloadImage(url: string) {\r\n    try {\r\n      var _img = new Image();\r\n      _img.src = url;\r\n      _img.onload = this.onProgress;\r\n    } catch (e) {\r\n      console.error(\"Failed Loading Images\");\r\n      console.error(e);\r\n    }\r\n  }\r\n\r\n  onProgress() {\r\n    this.loadedCnt++;\r\n    this.fireEvent(\"progress\", this.loadedCnt / this.totalCnt);\r\n    if (this.loadedCnt === this.totalCnt) this.fireEvent(\"completed\");\r\n  }\r\n}\r\n\r\nconst Loader = new _Loader();\r\nexport default Loader;\r\n"]},"metadata":{},"sourceType":"module"}