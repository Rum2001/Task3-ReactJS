{"ast":null,"code":"import { OfflineServer } from \"../Server/OfflineServer\";\nimport { OnlineServer } from \"../Server/OnlineServer\";\nimport { socket } from \"./socket\";\nexport class _API {\n  constructor() {\n    this.isOnline = false;\n    this._server = void 0;\n    this.player = void 0;\n    if (this.isOnline) this._server = new OnlineServer();else this._server = new OfflineServer();\n    socket.on(\"connect\", () => {\n      this.setOnlineMode(socket.connected);\n    });\n  }\n\n  setOnlineMode(isOnline) {\n    this.isOnline = isOnline;\n  }\n\n  playOnline(isOnline) {\n    if (isOnline) this._server = new OnlineServer();else this._server = new OfflineServer();\n  }\n\n  getServers() {\n    console.log(this._server);\n    return this._server.getServers();\n  }\n\n  getServerPlayers() {\n    return this._server.getServerPlayers();\n  }\n\n  createServer(serverName, serverPassword) {\n    return this._server.createServer(serverName, serverPassword);\n  }\n\n  joinServer(serverId, serverPassword) {\n    return this._server.joinServer(serverId, serverPassword);\n  }\n\n  emitReady() {\n    this._server.emitReady();\n  }\n\n  leaveServer() {\n    this._server.leaveServer();\n  }\n\n  move(draw, cardId) {\n    return this._server.move(draw, cardId);\n  }\n\n  onPlayersUpdated(cb) {\n    return this._server.onPlayersUpdated(cb);\n  }\n\n  onGameInit(cb) {\n    const unsub = this._server.onGameInit(cb);\n\n    console.log(this._server);\n    return unsub;\n  }\n\n  onMove(cb) {\n    return this._server.onMove(cb);\n  }\n\n  onPlayerLeft(cb) {\n    return this._server.onPlayerLeft(cb);\n  }\n\n  onFinishGame(cb) {\n    return this._server.onFinishGame(cb);\n  }\n\n  getPlayer() {\n    return this._server.getPlayer();\n  }\n\n}\nconst API = new _API();\nexport default API;","map":{"version":3,"sources":["C:/Users/NCC/Desktop/WorkSpace/Task3-ReactJS/src/api/API.ts"],"names":["OfflineServer","OnlineServer","socket","_API","constructor","isOnline","_server","player","on","setOnlineMode","connected","playOnline","getServers","console","log","getServerPlayers","createServer","serverName","serverPassword","joinServer","serverId","emitReady","leaveServer","move","draw","cardId","onPlayersUpdated","cb","onGameInit","unsub","onMove","onPlayerLeft","onFinishGame","getPlayer","API"],"mappings":"AAAA,SAASA,aAAT,QAA8B,yBAA9B;AACA,SAASC,YAAT,QAA6B,wBAA7B;AAGA,SAASC,MAAT,QAAuB,UAAvB;AAEA,OAAO,MAAMC,IAAN,CAAsC;AAK3CC,EAAAA,WAAW,GAAG;AAAA,SAJdC,QAIc,GAJH,KAIG;AAAA,SAHdC,OAGc;AAAA,SAFdC,MAEc;AACZ,QAAI,KAAKF,QAAT,EAAmB,KAAKC,OAAL,GAAe,IAAIL,YAAJ,EAAf,CAAnB,KACK,KAAKK,OAAL,GAAe,IAAIN,aAAJ,EAAf;AAELE,IAAAA,MAAM,CAACM,EAAP,CAAU,SAAV,EAAqB,MAAM;AACzB,WAAKC,aAAL,CAAmBP,MAAM,CAACQ,SAA1B;AACD,KAFD;AAGD;;AAEDD,EAAAA,aAAa,CAACJ,QAAD,EAAoB;AAC/B,SAAKA,QAAL,GAAgBA,QAAhB;AACD;;AAEDM,EAAAA,UAAU,CAACN,QAAD,EAAoB;AAC5B,QAAIA,QAAJ,EAAc,KAAKC,OAAL,GAAe,IAAIL,YAAJ,EAAf,CAAd,KACK,KAAKK,OAAL,GAAe,IAAIN,aAAJ,EAAf;AACN;;AAEDY,EAAAA,UAAU,GAA0B;AAClCC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKR,OAAjB;AAEA,WAAO,KAAKA,OAAL,CAAaM,UAAb,EAAP;AACD;;AACDG,EAAAA,gBAAgB,GAAsB;AACpC,WAAO,KAAKT,OAAL,CAAaS,gBAAb,EAAP;AACD;;AACDC,EAAAA,YAAY,CAACC,UAAD,EAAqBC,cAArB,EAA+D;AACzE,WAAO,KAAKZ,OAAL,CAAaU,YAAb,CAA0BC,UAA1B,EAAsCC,cAAtC,CAAP;AACD;;AACDC,EAAAA,UAAU,CAACC,QAAD,EAAmBF,cAAnB,EAA6D;AACrE,WAAO,KAAKZ,OAAL,CAAaa,UAAb,CAAwBC,QAAxB,EAAkCF,cAAlC,CAAP;AACD;;AAEDG,EAAAA,SAAS,GAAS;AAChB,SAAKf,OAAL,CAAae,SAAb;AACD;;AACDC,EAAAA,WAAW,GAAS;AAClB,SAAKhB,OAAL,CAAagB,WAAb;AACD;;AACDC,EAAAA,IAAI,CAACC,IAAD,EAAuBC,MAAvB,EAAsD;AACxD,WAAO,KAAKnB,OAAL,CAAaiB,IAAb,CAAkBC,IAAlB,EAAwBC,MAAxB,CAAP;AACD;;AACDC,EAAAA,gBAAgB,CAACC,EAAD,EAA8C;AAC5D,WAAO,KAAKrB,OAAL,CAAaoB,gBAAb,CAA8BC,EAA9B,CAAP;AACD;;AACDC,EAAAA,UAAU,CACRD,EADQ,EAEI;AACZ,UAAME,KAAK,GAAG,KAAKvB,OAAL,CAAasB,UAAb,CAAwBD,EAAxB,CAAd;;AACAd,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKR,OAAjB;AACA,WAAOuB,KAAP;AACD;;AACDC,EAAAA,MAAM,CACJH,EADI,EAOQ;AACZ,WAAO,KAAKrB,OAAL,CAAawB,MAAb,CAAoBH,EAApB,CAAP;AACD;;AACDI,EAAAA,YAAY,CAACJ,EAAD,EAA6B;AACvC,WAAO,KAAKrB,OAAL,CAAayB,YAAb,CAA0BJ,EAA1B,CAAP;AACD;;AACDK,EAAAA,YAAY,CAACL,EAAD,EAAqD;AAC/D,WAAO,KAAKrB,OAAL,CAAa0B,YAAb,CAA0BL,EAA1B,CAAP;AACD;;AACDM,EAAAA,SAAS,GAAW;AAClB,WAAO,KAAK3B,OAAL,CAAa2B,SAAb,EAAP;AACD;;AA3E0C;AA8E7C,MAAMC,GAAG,GAAG,IAAI/B,IAAJ,EAAZ;AAEA,eAAe+B,GAAf","sourcesContent":["import { OfflineServer } from \"../Server/OfflineServer\";\r\nimport { OnlineServer } from \"../Server/OnlineServer\";\r\nimport { ServerInterface } from \"../Server/ServerInterface\";\r\nimport { Player, GameServer, Card } from \"../utils/interfaces\";\r\nimport { socket } from \"./socket\";\r\n\r\nexport class _API implements ServerInterface {\r\n  isOnline = false;\r\n  _server: ServerInterface;\r\n  player?: Player;\r\n\r\n  constructor() {\r\n    if (this.isOnline) this._server = new OnlineServer();\r\n    else this._server = new OfflineServer();\r\n\r\n    socket.on(\"connect\", () => {\r\n      this.setOnlineMode(socket.connected);\r\n    });\r\n  }\r\n\r\n  setOnlineMode(isOnline: boolean) {\r\n    this.isOnline = isOnline;\r\n  }\r\n\r\n  playOnline(isOnline: boolean) {\r\n    if (isOnline) this._server = new OnlineServer();\r\n    else this._server = new OfflineServer();\r\n  }\r\n\r\n  getServers(): Promise<GameServer[]> {\r\n    console.log(this._server);\r\n\r\n    return this._server.getServers();\r\n  }\r\n  getServerPlayers(): Promise<Player[]> {\r\n    return this._server.getServerPlayers();\r\n  }\r\n  createServer(serverName: string, serverPassword?: string): Promise<string> {\r\n    return this._server.createServer(serverName, serverPassword);\r\n  }\r\n  joinServer(serverId: string, serverPassword?: string): Promise<string> {\r\n    return this._server.joinServer(serverId, serverPassword);\r\n  }\r\n\r\n  emitReady(): void {\r\n    this._server.emitReady();\r\n  }\r\n  leaveServer(): void {\r\n    this._server.leaveServer();\r\n  }\r\n  move(draw: boolean | null, cardId: string): Promise<void> {\r\n    return this._server.move(draw, cardId);\r\n  }\r\n  onPlayersUpdated(cb: (players: Player[]) => void): () => void {\r\n    return this._server.onPlayersUpdated(cb);\r\n  }\r\n  onGameInit(\r\n    cb: (data: { players: Player[]; cards: Card[] }) => void\r\n  ): () => void {\r\n    const unsub = this._server.onGameInit(cb);\r\n    console.log(this._server);\r\n    return unsub;\r\n  }\r\n  onMove(\r\n    cb: (data: {\r\n      nxtPlayer: number;\r\n      card: Card;\r\n      draw?: number | undefined;\r\n      cardsToDraw?: Card[] | undefined;\r\n    }) => void\r\n  ): () => void {\r\n    return this._server.onMove(cb);\r\n  }\r\n  onPlayerLeft(cb: () => void): () => void {\r\n    return this._server.onPlayerLeft(cb);\r\n  }\r\n  onFinishGame(cb: (playersOrdered: Player[]) => void): () => void {\r\n    return this._server.onFinishGame(cb);\r\n  }\r\n  getPlayer(): Player {\r\n    return this._server.getPlayer();\r\n  }\r\n}\r\n\r\nconst API = new _API();\r\n\r\nexport default API;\r\n"]},"metadata":{},"sourceType":"module"}