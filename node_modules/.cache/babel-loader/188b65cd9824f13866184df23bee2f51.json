{"ast":null,"code":"import { socket } from \"../api/socket\";\nimport BotsServer from \"../BotsServer/BotsServer\";\nexport class OfflineServer {\n  /**\r\n   *\r\n   */\n  constructor() {\n    this.player = void 0;\n    this._botsServer = void 0;\n    this._botsServer = new BotsServer();\n  }\n\n  async getServers() {\n    return [];\n  }\n\n  async getServerPlayers() {\n    return this._botsServer.players.map(p => ({ ...p,\n      cards: []\n    }));\n  }\n\n  async createServer(serverName, serverPassword) {\n    return new Promise((res, rej) => {\n      socket.emit(\"create-server\", {\n        serverName,\n        serverPassword,\n        player: this.getPlayer()\n      }, (err, playerId) => {\n        if (err) return rej(err);\n        res(playerId);\n      });\n    });\n  }\n\n  async joinServer(serverId, serverPassword) {\n    this._botsServer = new BotsServer();\n\n    this._botsServer.init();\n\n    const playerId = this._botsServer.joinPlayer(this.getPlayer());\n\n    setTimeout(() => this._botsServer.addBots(), 2000);\n    return playerId;\n  }\n\n  emitReady() {\n    this._botsServer.ready();\n  }\n\n  leaveServer() {\n    this._botsServer = null;\n  }\n\n  async move(draw, cardId) {\n    this._botsServer.move(draw, cardId);\n  }\n\n  onPlayersUpdated(cb) {\n    this._botsServer.addEventListener(\"players-changed\", cb);\n\n    return () => this._botsServer.removeEventListener(\"players-changed\", cb);\n  }\n\n  onGameInit(cb) {\n    this._botsServer.addEventListener(\"game-init\", cb);\n\n    return () => this._botsServer.removeEventListener(\"game-init\", cb);\n  }\n\n  onMove(cb) {\n    this._botsServer.addEventListener(\"move\", cb);\n\n    return () => this._botsServer.removeEventListener(\"move\", cb);\n  }\n\n  onPlayerLeft(cb) {\n    this._botsServer.addEventListener(\"player-left\", cb);\n\n    return () => this._botsServer.removeEventListener(\"player-left\", cb);\n  }\n\n  onFinishGame(cb) {\n    this._botsServer.addEventListener(\"finish-game\", cb);\n\n    return () => this._botsServer.removeEventListener(\"finish-game\", cb);\n  }\n\n  removeAllListeners() {\n    this._botsServer.removeAllListeners();\n  }\n\n  getPlayer() {\n    if (this.player) return this.player;\n    this.player = {};\n    this.player.name = localStorage.getItem(\"playerName\");\n    this.player.img = localStorage.getItem(\"playerImg\");\n    return this.player;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/NCC/Desktop/WorkSpace/Task3-ReactJS/src/Server/OfflineServer.ts"],"names":["socket","BotsServer","OfflineServer","constructor","player","_botsServer","getServers","getServerPlayers","players","map","p","cards","createServer","serverName","serverPassword","Promise","res","rej","emit","getPlayer","err","playerId","joinServer","serverId","init","joinPlayer","setTimeout","addBots","emitReady","ready","leaveServer","move","draw","cardId","onPlayersUpdated","cb","addEventListener","removeEventListener","onGameInit","onMove","onPlayerLeft","onFinishGame","removeAllListeners","name","localStorage","getItem","img"],"mappings":"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","sourcesContent":["import { GameServer, Player, Card } from \"../utils/interfaces\";\r\nimport { ServerInterface } from \"./ServerInterface\";\r\nimport { socket } from \"../api/socket\";\r\nimport BotsServer from \"../BotsServer/BotsServer\";\r\n\r\nexport class OfflineServer implements ServerInterface {\r\n  player?: Player;\r\n\r\n  _botsServer: BotsServer;\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor() {\r\n    this._botsServer = new BotsServer();\r\n  }\r\n\r\n  async getServers(): Promise<GameServer[]> {\r\n    return [];\r\n  }\r\n\r\n  async getServerPlayers(): Promise<Player[]> {\r\n    return this._botsServer.players.map((p) => ({ ...p, cards: [] }));\r\n  }\r\n\r\n  async createServer(\r\n    serverName: string,\r\n    serverPassword?: string\r\n  ): Promise<string> {\r\n    return new Promise((res, rej) => {\r\n      socket.emit(\r\n        \"create-server\",\r\n        { serverName, serverPassword, player: this.getPlayer() },\r\n        (err: any, playerId: string) => {\r\n          if (err) return rej(err);\r\n          res(playerId);\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  async joinServer(serverId: string, serverPassword?: string): Promise<string> {\r\n    this._botsServer = new BotsServer();\r\n    this._botsServer.init();\r\n    const playerId = this._botsServer.joinPlayer(this.getPlayer());\r\n    setTimeout(() => this._botsServer.addBots(), 2000);\r\n    return playerId;\r\n  }\r\n\r\n  emitReady(): void {\r\n    this._botsServer.ready();\r\n  }\r\n\r\n  leaveServer(): void {\r\n    this._botsServer = null as any;\r\n  }\r\n  async move(draw: boolean | null, cardId: string): Promise<void> {\r\n    this._botsServer.move(draw, cardId);\r\n  }\r\n\r\n  onPlayersUpdated(cb: (players: Player[]) => void): () => void {\r\n    this._botsServer.addEventListener(\"players-changed\", cb);\r\n    return () => this._botsServer.removeEventListener(\"players-changed\", cb);\r\n  }\r\n\r\n  onGameInit(\r\n    cb: (data: { players: Player[]; cards: Card[] }) => void\r\n  ): () => void {\r\n    this._botsServer.addEventListener(\"game-init\", cb);\r\n    return () => this._botsServer.removeEventListener(\"game-init\", cb);\r\n  }\r\n\r\n  onMove(\r\n    cb: (data: {\r\n      nxtPlayer: number;\r\n      card: Card;\r\n      draw?: number | undefined;\r\n      cardsToDraw?: Card[] | undefined;\r\n    }) => void\r\n  ): () => void {\r\n    this._botsServer.addEventListener(\"move\", cb);\r\n    return () => this._botsServer.removeEventListener(\"move\", cb);\r\n  }\r\n\r\n  onPlayerLeft(cb: () => void): () => void {\r\n    this._botsServer.addEventListener(\"player-left\", cb);\r\n    return () => this._botsServer.removeEventListener(\"player-left\", cb);\r\n  }\r\n\r\n  onFinishGame(cb: (playersOrdered: Player[]) => void): () => void {\r\n    this._botsServer.addEventListener(\"finish-game\", cb);\r\n    return () => this._botsServer.removeEventListener(\"finish-game\", cb);\r\n  }\r\n\r\n  removeAllListeners() {\r\n    this._botsServer.removeAllListeners();\r\n  }\r\n\r\n  getPlayer(): Player {\r\n    if (this.player) return this.player;\r\n    this.player = {} as Player;\r\n    this.player.name = localStorage.getItem(\"playerName\") as string;\r\n    this.player.img = localStorage.getItem(\"playerImg\") as string;\r\n    return this.player;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}